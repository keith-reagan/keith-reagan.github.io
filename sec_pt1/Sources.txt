Sources - 

Logwatch — program to scan system logs for interesting lines
	https://techglimpse.com/linux-install-configure-logwatch/ Centos
	https://linoxide.com/how-to-install-logwatch-on-ubuntu-20-04/ Ubuntu

Logcheck — system log analyzer and reporter
	https://www.maketecheasier.com/logcheck-analyses-log-files-linux/ Ubuntu



4 Open Source Log Monitoring and Management Tools for Linux -
https://www.tecmint.com/best-linux-log-monitoring-and-management-tools/
	https://www.graylog.org
	https://logcheck.org
	https://sourceforge.net/projects/logwatch/
	https://www.elastic.co/logstash/
	https://linuxhint.com/auditd_linux_tutorial/
	

https://www.cyberciti.biz/faq/how-do-i-add-jobs-to-cron-under-linux-or-unix-oses/
https://ostechnix.com/a-beginners-guide-to-cron-jobs/
https://www.youtube.com/watch?v=QZJ1drMQz1A
https://fedingo.com/how-to-save-grep-output-to-file-in-linux/

https://github.com/CoreyMSchafer/code_snippets/blob/master/Cron-Tasks/snippets.txt
https://stackoverflow.com/questions/61183536/restarting-auditd-service-gives-dependency-error to get centos to start process


########################notes from https://www.networkworld.com/article/3263752/reviewing-logins-on-linux.html ########################

last 
Command provides an easy way to review recent logins on a Linux system. It also has some useful options –- such as looking for logins for one particular user or looking for logins in an older wtmp file.

$ last jdoe								# Look for logins for a particular user
$ last -n 10 $USER						# Look at last 10 logins for current user
$ last -f /var/log/wtmp.1 jdoe			# To look further back for a user 
Note that the previous wtmp file on your system may not be wtmp.1. Some systems name the older files using date stamps like wtmp-2018-01-02. Check /var/log before you rely on the command

#!/bin/bash

echo -n "Start date: (e.g., Mar 1): "
read start
echo -n "End date: (e.g., Mar 11): "
read end

last | grep -v wtmp | while read line
do
    date=`date -d "$(echo $line | awk '{ print $5" "$6" "$7 }')" +%s`
    [[ $date -ge `date -d "$start 00:00" +%s` && $date -le `date -d "$end 23:59" +%s` ]] && echo $line
done

last -f /var/log/wtmp.1 | grep -v wtmp | while read line
do
    date=`date -d "$(echo $line | awk '{ print $5" "$6" "$7 }')" +%s`
    [[ $date -ge `date -d "$start 00:00" +%s` && $date -le `date -d "$end 23:59" +%s` ]] && echo $line
done

This script prompts for the beginning and end dates for your search and provides examples of the required format. It then runs the last command using a simple filter to allow it to ignore the “wtmp begins” message that lets you know how far back you are searching. It then takes the date from each line and converts it to the “seconds since Jan 1st, 1970 UTC” format. Next, it compares each record to the range of dates we’re looking for (also converted to the same format) and prints those that fall in between those two dates.

The second loop, added to allow it to also search through the wtmp.1 file, can be easily removed if it isn't needed. It uses the same commands once it’s looping through the output of the last command for the second file.

No checking is being done within this script to ensure that anyone running it has provided the dates in the required format. Making this mistake will, however, only generate a downpour of “invalid date” commands and won’t otherwise ruin your day.